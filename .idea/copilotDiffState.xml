<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/grupo/aplicativo/reports/ReportExporter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/grupo/aplicativo/reports/ReportExporter.kt" />
              <option name="originalContent" value="package grupo.aplicativo.reports&#10;&#10;import java.lang.StringBuilder&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;object ReportExporter {&#10;&#10;    // Genera contenido CSV simple a partir de una lista de movimientos&#10;    fun generateCsv(movements: List&lt;Movement&gt;): String {&#10;        val sb = StringBuilder()&#10;        // Encabezado&#10;        sb.append(&quot;id,fecha,tipo,producto,cantidad,unidad,proveedor,usuario,referencia\n&quot;)&#10;        val dateFormatIn = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, Locale.getDefault())&#10;        val dateFormatOut = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;, Locale.getDefault())&#10;&#10;        for (m in movements) {&#10;            // intentar formatear fecha; si falla usar raw&#10;            val fecha = try {&#10;                val d = dateFormatIn.parse(m.dateIso)&#10;                if (d != null) dateFormatOut.format(d) else m.dateIso&#10;            } catch (e: Exception) {&#10;                m.dateIso&#10;            }&#10;            val provider = m.provider ?: &quot;&quot;&#10;            val user = m.user ?: &quot;&quot;&#10;            val ref = m.reference ?: &quot;&quot;&#10;            // escapar comas simples reemplazando comillas&#10;            val productEsc = m.productName.replace('&quot;', '\\&quot;')&#10;            sb.append(&quot;${m.id},\&quot;$fecha\&quot;,${m.type},\&quot;$productEsc\&quot;,${m.quantity},${m.unit},\&quot;$provider\&quot;,\&quot;$user\&quot;,\&quot;$ref\&quot;\n&quot;)&#10;        }&#10;        return sb.toString()&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package grupo.aplicativo.reports&#10;&#10;import java.lang.StringBuilder&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;object ReportExporter {&#10;&#10;    // Genera contenido CSV simple a partir de una lista de movimientos&#10;    fun generateCsv(movements: List&lt;Movement&gt;): String {&#10;        val sb = StringBuilder()&#10;        // Encabezado&#10;        sb.append(&quot;id,fecha,tipo,producto,cantidad,unidad,proveedor,usuario,referencia\n&quot;)&#10;        val dateFormatIn = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, Locale.getDefault())&#10;        val dateFormatOut = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm&quot;, Locale.getDefault())&#10;&#10;        for (m in movements) {&#10;            // intentar formatear fecha; si falla usar raw&#10;            val fecha = try {&#10;                val d = dateFormatIn.parse(m.dateIso)&#10;                if (d != null) dateFormatOut.format(d) else m.dateIso&#10;            } catch (_: Exception) {&#10;                m.dateIso&#10;            }&#10;            val provider = m.provider ?: &quot;&quot;&#10;            val user = m.user ?: &quot;&quot;&#10;            val ref = m.reference ?: &quot;&quot;&#10;            // escapar comillas dobles en el nombre del producto&#10;            val productEsc = m.productName.replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;)&#10;            sb.append(&quot;${m.id},\&quot;$fecha\&quot;,${m.type},\&quot;$productEsc\&quot;,${m.quantity},${m.unit},\&quot;$provider\&quot;,\&quot;$user\&quot;,\&quot;$ref\&quot;\n&quot;)&#10;        }&#10;        return sb.toString()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/grupo/aplicativo/reports/ReportModels.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/grupo/aplicativo/reports/ReportModels.kt" />
              <option name="updatedContent" value="package grupo.aplicativo.reports&#10;&#10;import java.io.Serializable&#10;&#10;// Modelo mínimo para un movimiento en inventario&#10;data class Movement(&#10;    val id: Long,&#10;    val dateIso: String, // ISO date string&#10;    val type: String, // &quot;IN&quot; or &quot;OUT&quot;&#10;    val productName: String,&#10;    val quantity: Int,&#10;    val unit: String,&#10;    val provider: String?,&#10;    val user: String?,&#10;    val reference: String?&#10;) : Serializable&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/grupo/aplicativo/reports/ReportViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/grupo/aplicativo/reports/ReportViewModel.kt" />
              <option name="originalContent" value="package grupo.aplicativo.reports&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class ReportViewModel(private val repository: ReportRepository = ReportRepository()) : ViewModel() {&#10;&#10;    private val _movements = MutableStateFlow&lt;List&lt;Movement&gt;&gt;(emptyList())&#10;    val movements: StateFlow&lt;List&lt;Movement&gt;&gt; = _movements&#10;&#10;    private val _loading = MutableStateFlow(false)&#10;    val loading: StateFlow&lt;Boolean&gt; = _loading&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error&#10;&#10;    fun loadMovements(startIso: String? = null, endIso: String? = null) {&#10;        viewModelScope.launch {&#10;            _loading.value = true&#10;            _error.value = null&#10;            try {&#10;                val list = repository.getMovements(startIso, endIso)&#10;                _movements.value = list&#10;            } catch (e: Exception) {&#10;                _error.value = e.message ?: &quot;Error desconocido&quot;&#10;            } finally {&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun generateCsvContent(): String {&#10;        return ReportExporter.generateCsv(_movements.value)&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package grupo.aplicativo.reports&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class ReportViewModel(private val repository: ReportRepository = ReportRepository()) : ViewModel() {&#10;&#10;    private val _movements = MutableStateFlow&lt;List&lt;Movement&gt;&gt;(emptyList())&#10;    val movements: StateFlow&lt;List&lt;Movement&gt;&gt; = _movements&#10;&#10;    private val _loading = MutableStateFlow(false)&#10;    val loading: StateFlow&lt;Boolean&gt; = _loading&#10;&#10;    private val _error = MutableStateFlow&lt;String?&gt;(null)&#10;    val error: StateFlow&lt;String?&gt; = _error&#10;&#10;    fun loadMovements(startIso: String? = null, endIso: String? = null) {&#10;        viewModelScope.launch {&#10;            _loading.value = true&#10;            _error.value = null&#10;            try {&#10;                val list = repository.getMovements(startIso, endIso)&#10;                _movements.value = list&#10;            } catch (e: Exception) {&#10;                _error.value = e.message ?: &quot;Error desconocido&quot;&#10;            } finally {&#10;                _loading.value = false&#10;            }&#10;        }&#10;    }&#10;&#10;    suspend fun generateCsvContent(): String {&#10;        // uso calificado para evitar un posible problema de resolución&#10;        return grupo.aplicativo.reports.ReportExporter.generateCsv(_movements.value)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>